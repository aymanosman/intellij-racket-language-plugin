/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.aymanosman.racket.plugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.aymanosman.racket.plugin.psi.RacketTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Racket.flex</tt>
 */
class RacketLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MAIN = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1672 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\76\2\1\3\277\2");

  /* The ZZ_CMAP_A table has 512 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\44\1\3\1\2\1\4\2\2\22\44\1\66\1\67\1\43\1\37\1\44\1\60\1\72\1\54\1\75"+
    "\1\76\1\44\1\14\1\73\1\14\1\55\1\70\4\32\4\33\2\31\1\44\1\34\4\44\1\74\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\14\1\16\1\17\1\14\1\20\1\21\1\22"+
    "\1\14\1\35\1\24\1\25\1\26\1\27\1\30\3\14\1\77\1\40\1\100\1\44\1\14\1\71\1"+
    "\45\1\46\1\7\1\10\1\53\1\52\1\65\1\61\1\15\1\14\1\16\1\64\1\14\1\50\1\21\1"+
    "\41\1\63\1\23\1\62\1\47\1\36\1\51\1\30\1\42\2\14\1\56\1\57\1\56\7\44\1\4\172"+
    "\44\250\0\2\1\126\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\3\2\4\1\1\1\5\3\2"+
    "\1\6\1\7\1\2\1\10\1\11\1\12\1\13\1\14"+
    "\4\0\1\15\2\0\1\16\6\0\1\17\1\10\1\0"+
    "\1\20\1\0\14\21\17\0\1\21\2\0\1\21\6\0"+
    "\1\21\4\0\1\21\6\0\1\21\11\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[99];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\202\0\u0104\0\u034d"+
    "\0\u038e\0\202\0\202\0\202\0\202\0\u03cf\0\u0410\0\u02cb"+
    "\0\u034d\0\u0451\0\u0492\0\u04d3\0\202\0\u0514\0\u0555\0\u0596"+
    "\0\u05d7\0\u030c\0\u0618\0\202\0\202\0\u0659\0\u069a\0\u06db"+
    "\0\202\0\u071c\0\u075d\0\u079e\0\u07df\0\u0820\0\u0861\0\u08a2"+
    "\0\u08e3\0\u0924\0\u0965\0\u09a6\0\u09e7\0\u0a28\0\u0a69\0\u0aaa"+
    "\0\u069a\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef\0\u0c30\0\u0c71"+
    "\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\u08a2\0\u0db6\0\u0df7\0\u0e38"+
    "\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff\0\u1040"+
    "\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6\0\u1207\0\u1248"+
    "\0\u1289\0\u12ca\0\u130b\0\u0861\0\u134c\0\u138d\0\u13ce\0\u140f"+
    "\0\u1450\0\u1491\0\u14d2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[99];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\37\3\1\4\41\3\1\5\1\6\1\7\1\10\1\6"+
    "\24\5\3\11\1\12\2\5\1\13\1\14\2\5\1\15"+
    "\10\5\1\16\1\17\1\3\1\20\6\5\1\10\2\5"+
    "\1\16\1\5\1\21\1\5\1\22\1\23\1\24\1\25"+
    "\165\0\1\26\2\0\1\27\11\0\2\5\2\0\30\5"+
    "\1\0\3\5\1\30\2\5\1\0\10\5\1\0\1\5"+
    "\1\0\1\31\6\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\4\0\1\5\1\6\2\7\1\6\27\5\1\0"+
    "\3\5\1\30\2\5\1\0\10\5\1\0\1\5\1\0"+
    "\1\31\6\5\1\7\2\5\1\0\1\5\1\0\1\5"+
    "\5\0\4\7\61\0\1\7\14\0\2\10\62\0\1\10"+
    "\12\0\2\5\2\0\25\5\3\11\1\0\3\5\1\30"+
    "\2\5\1\0\10\5\1\0\1\5\1\0\1\31\6\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\4\0\1\12"+
    "\2\0\1\12\1\0\74\12\12\0\1\32\10\0\1\33"+
    "\1\0\1\32\3\0\3\34\1\35\3\0\1\36\1\33"+
    "\1\0\1\37\3\0\1\32\2\0\1\32\1\0\1\16"+
    "\3\0\1\5\1\40\1\41\6\0\2\16\1\21\1\0"+
    "\1\22\1\0\1\24\1\0\1\5\2\0\1\5\1\0"+
    "\74\5\40\42\1\43\2\42\1\44\35\42\57\31\1\5"+
    "\21\31\74\0\1\45\51\0\1\46\40\0\27\47\1\0"+
    "\2\47\2\0\2\47\2\0\7\47\5\0\5\47\13\0"+
    "\2\32\2\0\30\32\1\0\3\32\1\0\2\32\1\0"+
    "\10\32\1\0\1\32\2\0\6\32\1\0\2\32\1\0"+
    "\1\32\1\0\1\32\46\0\1\50\67\0\3\34\41\0"+
    "\1\22\1\0\1\24\1\0\1\51\2\0\1\51\1\0"+
    "\1\51\1\52\10\51\1\53\1\54\1\51\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\2\51\1\63\2\51\1\56"+
    "\1\64\2\51\1\55\4\51\1\52\1\60\1\54\1\62"+
    "\10\51\1\57\1\51\1\53\14\51\2\0\36\37\1\65"+
    "\2\37\1\44\35\37\45\0\1\66\130\0\1\22\1\0"+
    "\1\24\2\0\2\42\1\0\1\42\16\0\1\42\2\0"+
    "\1\67\3\0\2\42\2\0\1\67\1\0\1\42\1\0"+
    "\1\67\1\42\1\0\10\42\74\0\1\70\35\0\27\47"+
    "\1\0\2\47\2\0\2\47\2\0\7\47\5\0\5\47"+
    "\2\0\1\71\47\0\1\72\3\0\1\42\42\0\1\73"+
    "\37\0\1\73\50\0\1\74\74\0\1\75\14\0\1\76"+
    "\7\0\1\76\14\0\1\75\32\0\1\77\37\0\1\77"+
    "\44\0\1\100\14\0\1\101\7\0\1\101\14\0\1\100"+
    "\47\0\1\102\16\0\1\102\44\0\1\103\37\0\1\103"+
    "\40\0\6\104\16\0\3\104\11\0\2\104\3\0\2\104"+
    "\52\0\1\105\21\0\1\105\63\0\2\106\52\0\6\107"+
    "\16\0\3\107\11\0\2\107\3\0\2\107\26\0\2\37"+
    "\1\0\1\37\16\0\1\37\6\0\2\37\4\0\1\37"+
    "\1\0\1\110\1\37\1\0\10\37\106\0\1\111\23\0"+
    "\6\42\16\0\3\42\11\0\2\42\3\0\2\42\112\0"+
    "\1\112\56\0\1\37\44\0\1\113\111\0\1\114\27\0"+
    "\1\114\60\0\1\115\67\0\1\116\44\0\1\116\27\0"+
    "\1\117\51\0\1\117\40\0\1\120\21\0\1\120\37\0"+
    "\1\121\37\0\1\121\37\0\1\122\37\0\1\122\41\0"+
    "\1\51\37\0\1\51\37\0\6\64\16\0\3\64\11\0"+
    "\2\64\3\0\2\64\57\0\2\51\52\0\6\123\16\0"+
    "\3\123\11\0\2\123\3\0\2\123\32\0\6\37\16\0"+
    "\3\37\11\0\2\37\3\0\2\37\106\0\1\124\105\0"+
    "\1\27\30\0\1\125\73\0\1\126\41\0\1\126\44\0"+
    "\1\127\44\0\1\127\33\0\1\51\44\0\1\51\25\0"+
    "\1\51\41\0\1\51\53\0\1\130\7\0\1\130\63\0"+
    "\1\131\66\0\1\117\76\0\6\132\16\0\3\132\11\0"+
    "\2\132\3\0\2\132\100\0\1\133\21\0\1\22\1\0"+
    "\1\24\25\0\1\134\35\0\1\134\30\0\1\135\37\0"+
    "\1\135\43\0\1\136\106\0\1\137\11\0\1\137\71\0"+
    "\1\140\7\0\1\140\47\0\6\51\16\0\3\51\11\0"+
    "\2\51\3\0\2\51\110\0\1\141\26\0\1\142\41\0"+
    "\1\142\45\0\1\117\27\0\1\117\50\0\1\51\27\0"+
    "\1\51\55\0\1\51\21\0\1\51\102\0\1\41\23\0"+
    "\1\22\1\0\1\24\12\0\1\143\41\0\1\143\35\0"+
    "\1\51\70\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5395];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\11\12\1\1\11\3\1\4\11\4\0"+
    "\1\1\2\0\1\11\6\0\2\11\1\0\1\1\1\0"+
    "\1\11\13\1\17\0\1\1\2\0\1\1\6\0\1\1"+
    "\4\0\1\1\6\0\1\1\11\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[99];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  RacketLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return RacketTypes.NUMBER;
            } 
            // fall through
          case 18: break;
          case 2: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 19: break;
          case 3: 
            { return RacketTypes.IDENTIFIER;
            } 
            // fall through
          case 20: break;
          case 4: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 21: break;
          case 5: 
            { return RacketTypes.COMMENT;
            } 
            // fall through
          case 22: break;
          case 6: 
            { return RacketTypes.CONSTANT;
            } 
            // fall through
          case 23: break;
          case 7: 
            { return RacketTypes.DOT;
            } 
            // fall through
          case 24: break;
          case 8: 
            { return RacketTypes.UNQUOTE;
            } 
            // fall through
          case 25: break;
          case 9: 
            { return RacketTypes.OPEN_PAREN;
            } 
            // fall through
          case 26: break;
          case 10: 
            { return RacketTypes.CLOSE_PAREN;
            } 
            // fall through
          case 27: break;
          case 11: 
            { return RacketTypes.OPEN_SQUARE;
            } 
            // fall through
          case 28: break;
          case 12: 
            { return RacketTypes.CLOSE_SQUARE;
            } 
            // fall through
          case 29: break;
          case 13: 
            { {
              String xs = yytext().toString();
              if (xs.equals("#true")
                  || xs.equals("#false")
                  || xs.equals("#t")
                  || xs.equals("#f")
                  || xs.equals("#T")
                  || xs.equals("#F")) {
                  return RacketTypes.BOOLEAN;
              } else {
                  return TokenType.ERROR_ELEMENT;
              }
          }
            } 
            // fall through
          case 30: break;
          case 14: 
            { return RacketTypes.SEXP_COMMENT;
            } 
            // fall through
          case 31: break;
          case 15: 
            { return RacketTypes.STRING;
            } 
            // fall through
          case 32: break;
          case 16: 
            { yybegin(MAIN); return RacketTypes.HASH_LANG;
            } 
            // fall through
          case 33: break;
          case 17: 
            { return RacketTypes.CHARACTER;
            } 
            // fall through
          case 34: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
