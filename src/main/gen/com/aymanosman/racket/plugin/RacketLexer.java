/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.aymanosman.racket.plugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.aymanosman.racket.plugin.psi.RacketTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Racket.flex</tt>
 */
class RacketLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MAIN = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1672 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\76\2\1\3\277\2");

  /* The ZZ_CMAP_A table has 512 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\46\1\3\1\2\1\4\2\2\22\46\1\72\1\73\1\45\1\41\1\46\1\63\1\76\1\56\1\101"+
    "\1\102\1\46\1\35\1\77\1\35\1\57\1\74\1\60\3\33\4\34\2\32\1\64\1\36\4\46\1"+
    "\100\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\14\1\16\1\17\1\14\1\20\1"+
    "\21\1\22\1\14\1\37\1\24\1\25\1\26\1\27\1\30\1\31\2\14\1\103\1\42\1\104\1\46"+
    "\1\14\1\75\1\47\1\50\1\7\1\10\1\55\1\54\1\71\1\65\1\15\1\14\1\16\1\70\1\14"+
    "\1\52\1\21\1\43\1\67\1\23\1\66\1\51\1\40\1\53\1\30\1\44\2\14\1\61\1\62\1\61"+
    "\7\46\1\4\172\46\250\0\2\1\126\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\2\2\4\1\3\1\1"+
    "\1\4\1\5\3\2\1\6\1\7\1\2\1\10\1\11"+
    "\1\12\1\13\1\14\4\0\2\4\1\15\1\0\1\1"+
    "\1\0\1\16\3\0\1\17\4\0\1\20\1\10\1\0"+
    "\1\21\2\4\1\0\14\22\10\0\1\4\12\0\1\22"+
    "\2\0\1\22\1\0\1\5\2\0\1\4\3\0\1\22"+
    "\4\0\1\22\1\0\1\1\5\0\1\22\11\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\212\0\u0159"+
    "\0\u03c6\0\u040b\0\212\0\212\0\212\0\212\0\u0450\0\u0495"+
    "\0\u033c\0\u03c6\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee\0\u0633"+
    "\0\212\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1\0\u0381"+
    "\0\u0816\0\212\0\212\0\u085b\0\u08a0\0\u08e5\0\u092a\0\u096f"+
    "\0\212\0\u09b4\0\u09f9\0\u0a3e\0\u0a83\0\u0ac8\0\u0b0d\0\u0b52"+
    "\0\u0b97\0\u0bdc\0\u0c21\0\u0c66\0\u0cab\0\u0cf0\0\u0d35\0\u0d7a"+
    "\0\u0dbf\0\u0e04\0\u0e49\0\u08a0\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d"+
    "\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u1185"+
    "\0\u0b52\0\u11ca\0\u120f\0\u1254\0\212\0\u1299\0\u12de\0\u1323"+
    "\0\u1368\0\u13ad\0\u13f2\0\u1437\0\u147c\0\u14c1\0\u1506\0\u154b"+
    "\0\u1590\0\u15d5\0\u0159\0\u161a\0\u165f\0\u16a4\0\u16e9\0\u172e"+
    "\0\u1773\0\u17b8\0\u0b0d\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u1911"+
    "\0\u1956\0\u199b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\3\2\4\35\3\1\5\30\3\1\4\12\3\1\6"+
    "\1\7\1\10\1\4\1\7\25\6\3\11\1\12\1\13"+
    "\2\6\1\14\1\15\2\6\1\16\10\6\1\17\1\20"+
    "\1\11\1\3\1\21\7\6\1\4\2\6\1\17\1\6"+
    "\1\22\1\6\1\23\1\24\1\25\1\26\107\0\2\4"+
    "\66\0\1\4\102\0\1\27\2\0\1\30\11\0\2\6"+
    "\2\0\32\6\1\0\3\6\1\31\2\6\1\0\10\6"+
    "\1\0\2\6\1\0\1\32\7\6\1\0\2\6\1\0"+
    "\1\6\1\0\1\6\4\0\1\6\1\7\2\10\1\7"+
    "\31\6\1\0\3\6\1\31\2\6\1\0\10\6\1\0"+
    "\2\6\1\0\1\32\7\6\1\10\2\6\1\0\1\6"+
    "\1\0\1\6\5\0\4\10\65\0\1\10\12\0\2\6"+
    "\2\0\26\6\3\11\1\6\1\0\3\6\1\31\2\6"+
    "\1\0\10\6\1\0\1\6\1\11\1\0\1\32\7\6"+
    "\1\0\2\6\1\0\1\6\1\0\1\6\4\0\2\6"+
    "\2\0\11\6\1\33\2\6\1\34\15\6\1\0\3\6"+
    "\1\31\2\6\1\0\4\6\1\34\3\6\1\0\2\6"+
    "\1\0\1\32\7\6\1\0\2\6\1\0\1\6\1\0"+
    "\1\6\4\0\1\13\2\0\1\13\1\0\100\13\12\0"+
    "\1\35\10\0\1\36\1\0\1\35\3\0\1\37\3\40"+
    "\1\0\1\41\3\0\1\42\1\36\1\37\1\43\3\0"+
    "\1\35\2\0\1\35\1\0\1\17\1\0\1\40\1\0"+
    "\1\44\1\6\1\45\1\46\1\47\6\0\2\17\1\22"+
    "\1\0\1\23\1\0\1\25\1\0\1\6\2\0\1\6"+
    "\1\0\100\6\42\50\1\51\2\50\1\52\37\50\62\32"+
    "\1\6\22\32\100\0\1\53\53\0\1\54\42\0\31\55"+
    "\1\0\2\55\2\0\2\55\2\0\7\55\2\0\1\55"+
    "\4\0\5\55\13\0\2\6\2\0\14\6\1\56\15\6"+
    "\1\0\3\6\1\31\2\6\1\0\4\6\1\56\3\6"+
    "\1\0\2\6\1\0\1\32\7\6\1\0\2\6\1\0"+
    "\1\6\1\0\1\6\4\0\2\6\2\0\1\6\1\57"+
    "\30\6\1\0\3\6\1\31\2\6\1\0\1\6\1\57"+
    "\6\6\1\0\2\6\1\0\1\32\7\6\1\0\2\6"+
    "\1\0\1\6\1\0\1\6\4\0\2\35\2\0\32\35"+
    "\1\0\3\35\1\0\2\35\1\0\10\35\1\0\2\35"+
    "\2\0\7\35\1\0\2\35\1\0\1\35\1\0\1\35"+
    "\50\0\1\60\45\0\6\37\17\0\3\37\12\0\2\37"+
    "\3\0\2\37\2\0\1\37\56\0\3\40\23\0\1\40"+
    "\20\0\1\23\1\0\1\25\1\0\1\61\2\0\1\61"+
    "\1\0\1\61\1\62\10\61\1\63\1\64\1\61\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\3\61\1\73\3\61"+
    "\1\66\1\74\2\61\1\65\4\61\1\62\1\70\1\64"+
    "\1\72\4\61\1\73\5\61\1\67\1\61\1\63\14\61"+
    "\2\0\40\43\1\75\2\43\1\52\37\43\62\44\1\76"+
    "\22\44\2\45\2\0\32\45\1\0\3\45\1\77\2\45"+
    "\1\0\10\45\1\0\2\45\1\0\1\100\7\45\1\0"+
    "\2\45\1\0\1\45\1\0\1\45\53\0\1\101\136\0"+
    "\1\23\1\0\1\25\2\0\2\50\1\0\1\50\16\0"+
    "\1\50\2\0\1\102\4\0\2\50\3\0\1\102\1\0"+
    "\1\50\1\0\1\102\1\50\1\0\10\50\1\0\1\50"+
    "\76\0\1\103\37\0\31\55\1\0\2\55\2\0\2\55"+
    "\2\0\7\55\2\0\1\55\4\0\5\55\2\0\1\104"+
    "\10\0\2\6\2\0\6\6\1\105\23\6\1\0\3\6"+
    "\1\31\2\6\1\0\6\6\1\105\1\6\1\0\2\6"+
    "\1\0\1\32\7\6\1\0\2\6\1\0\1\6\1\0"+
    "\1\6\4\0\2\6\2\0\14\6\1\105\15\6\1\0"+
    "\3\6\1\31\2\6\1\0\4\6\1\105\3\6\1\0"+
    "\2\6\1\0\1\32\7\6\1\0\2\6\1\0\1\6"+
    "\1\0\1\6\45\0\1\106\3\0\1\50\44\0\1\107"+
    "\41\0\1\107\52\0\1\110\100\0\1\111\14\0\1\112"+
    "\11\0\1\112\14\0\1\111\34\0\1\113\41\0\1\113"+
    "\46\0\1\114\14\0\1\115\11\0\1\115\14\0\1\114"+
    "\51\0\1\116\20\0\1\116\46\0\1\117\41\0\1\117"+
    "\42\0\6\120\17\0\3\120\12\0\2\120\3\0\2\120"+
    "\2\0\1\120\51\0\1\121\23\0\1\121\66\0\2\122"+
    "\23\0\1\122\31\0\6\123\17\0\3\123\12\0\2\123"+
    "\3\0\2\123\2\0\1\123\25\0\2\43\1\0\1\43"+
    "\16\0\1\43\7\0\2\43\5\0\1\43\1\0\1\124"+
    "\1\43\1\0\10\43\1\0\1\43\24\0\41\44\1\125"+
    "\20\44\1\76\22\44\1\45\2\0\1\45\1\0\100\45"+
    "\62\100\1\45\22\100\66\0\1\126\23\0\6\50\17\0"+
    "\3\50\12\0\2\50\3\0\2\50\2\0\1\50\115\0"+
    "\1\127\13\0\2\6\2\0\32\6\1\0\3\6\1\31"+
    "\2\6\1\0\10\6\1\0\1\130\1\6\1\0\1\32"+
    "\7\6\1\0\2\6\1\0\1\6\1\0\1\6\51\0"+
    "\1\43\46\0\1\131\115\0\1\132\31\0\1\132\62\0"+
    "\1\133\73\0\1\134\50\0\1\134\27\0\1\135\55\0"+
    "\1\135\40\0\1\136\23\0\1\136\41\0\1\137\41\0"+
    "\1\137\41\0\1\140\41\0\1\140\43\0\1\61\41\0"+
    "\1\61\41\0\6\74\17\0\3\74\12\0\2\74\3\0"+
    "\2\74\2\0\1\74\57\0\2\61\23\0\1\61\31\0"+
    "\6\141\17\0\3\141\12\0\2\141\3\0\2\141\2\0"+
    "\1\141\31\0\6\43\17\0\3\43\12\0\2\43\3\0"+
    "\2\43\2\0\1\43\111\0\1\142\111\0\1\30\12\0"+
    "\2\6\2\0\32\6\1\0\3\6\1\31\2\6\1\0"+
    "\6\6\1\143\1\6\1\0\1\6\1\143\1\0\1\32"+
    "\7\6\1\0\2\6\1\0\1\6\1\0\1\6\22\0"+
    "\1\144\77\0\1\145\43\0\1\145\46\0\1\146\50\0"+
    "\1\146\33\0\1\61\50\0\1\61\25\0\1\61\43\0"+
    "\1\61\55\0\1\147\11\0\1\147\65\0\1\150\72\0"+
    "\1\135\102\0\6\151\17\0\3\151\12\0\2\151\3\0"+
    "\2\151\2\0\1\151\101\0\1\152\23\0\1\23\1\0"+
    "\1\25\25\0\1\153\41\0\1\153\30\0\1\154\41\0"+
    "\1\154\45\0\1\155\112\0\1\156\13\0\1\156\73\0"+
    "\1\157\11\0\1\157\51\0\6\61\17\0\3\61\12\0"+
    "\2\61\3\0\2\61\2\0\1\61\113\0\1\160\26\0"+
    "\1\161\43\0\1\161\47\0\1\135\31\0\1\135\52\0"+
    "\1\61\31\0\1\61\57\0\1\61\23\0\1\61\106\0"+
    "\1\47\25\0\1\23\1\0\1\25\12\0\1\162\43\0"+
    "\1\162\37\0\1\61\74\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6624];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\11\13\1\1\11\3\1\4\11\4\0"+
    "\3\1\1\0\1\1\1\0\1\11\3\0\1\1\4\0"+
    "\2\11\1\0\3\1\1\0\1\11\13\1\10\0\1\1"+
    "\12\0\1\1\2\0\1\1\1\0\1\11\2\0\1\1"+
    "\3\0\1\1\4\0\1\1\1\0\1\1\5\0\1\1"+
    "\11\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  RacketLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return RacketTypes.NUMBER;
            } 
            // fall through
          case 19: break;
          case 2: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 20: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 21: break;
          case 4: 
            { return RacketTypes.IDENTIFIER;
            } 
            // fall through
          case 22: break;
          case 5: 
            { return RacketTypes.COMMENT;
            } 
            // fall through
          case 23: break;
          case 6: 
            { return RacketTypes.CONSTANT;
            } 
            // fall through
          case 24: break;
          case 7: 
            { return RacketTypes.DOT;
            } 
            // fall through
          case 25: break;
          case 8: 
            { return RacketTypes.UNQUOTE;
            } 
            // fall through
          case 26: break;
          case 9: 
            { return RacketTypes.OPEN_PAREN;
            } 
            // fall through
          case 27: break;
          case 10: 
            { return RacketTypes.CLOSE_PAREN;
            } 
            // fall through
          case 28: break;
          case 11: 
            { return RacketTypes.OPEN_SQUARE;
            } 
            // fall through
          case 29: break;
          case 12: 
            { return RacketTypes.CLOSE_SQUARE;
            } 
            // fall through
          case 30: break;
          case 13: 
            { {
              String xs = yytext().toString();
              if (xs.equals("#true")
                  || xs.equals("#false")
                  || xs.equals("#t")
                  || xs.equals("#f")
                  || xs.equals("#T")
                  || xs.equals("#F")) {
                  return RacketTypes.BOOLEAN;
              } else {
                  return TokenType.ERROR_ELEMENT;
              }
          }
            } 
            // fall through
          case 31: break;
          case 14: 
            { return RacketTypes.SEXP_COMMENT;
            } 
            // fall through
          case 32: break;
          case 15: 
            { return RacketTypes.KEYWORD;
            } 
            // fall through
          case 33: break;
          case 16: 
            { return RacketTypes.STRING;
            } 
            // fall through
          case 34: break;
          case 17: 
            { yybegin(MAIN); return RacketTypes.HASH_LANG;
            } 
            // fall through
          case 35: break;
          case 18: 
            { return RacketTypes.CHARACTER;
            } 
            // fall through
          case 36: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
