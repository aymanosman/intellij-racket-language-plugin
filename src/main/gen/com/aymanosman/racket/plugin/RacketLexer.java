/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.aymanosman.racket.plugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.aymanosman.racket.plugin.psi.RacketTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Racket.flex</tt>
 */
class RacketLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MAIN = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1672 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\76\2\1\3\277\2");

  /* The ZZ_CMAP_A table has 512 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\33\1\3\1\2\1\4\2\2\22\33\1\47\1\50\1\32\1\15\1\33\1\43\1\53\1\40\1\61"+
    "\1\62\1\33\1\11\1\57\1\11\1\56\1\51\4\6\4\7\2\5\1\33\1\12\4\33\1\60\5\10\1"+
    "\55\15\11\1\54\1\14\5\11\1\63\1\16\1\64\1\33\1\11\1\52\1\21\1\34\1\22\1\10"+
    "\1\23\1\37\1\46\1\44\1\27\2\11\1\26\1\11\1\24\1\11\1\20\1\45\1\31\1\17\1\35"+
    "\1\13\1\36\1\25\1\30\2\11\1\41\1\42\1\41\7\33\1\4\172\33\250\0\2\1\126\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\3\2\4\1\1\1\5\3\2"+
    "\1\6\1\2\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\5\0\1\15\4\0\1\16\3\0\1\17\1\10\1\0"+
    "\1\20\6\21\7\0\2\21\6\0\1\21\3\0\1\21"+
    "\5\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[70];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\152\0\u02b1\0\324"+
    "\0\u02e6\0\152\0\152\0\152\0\152\0\u031b\0\u0350\0\u0247"+
    "\0\u02b1\0\u0385\0\152\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e"+
    "\0\u04c3\0\u027c\0\u04f8\0\152\0\152\0\u052d\0\u0562\0\152"+
    "\0\u0597\0\u05cc\0\u0601\0\u0636\0\u066b\0\u06a0\0\u06d5\0\u070a"+
    "\0\u073f\0\u0774\0\u0562\0\u07a9\0\u07de\0\u0813\0\u0848\0\u087d"+
    "\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25"+
    "\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[70];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\15\3\1\4\47\3\1\5\1\6\1\7\1\10\1\6"+
    "\3\11\2\5\1\12\2\5\1\13\1\14\13\5\1\15"+
    "\5\5\1\16\1\3\1\17\4\5\1\10\2\5\1\16"+
    "\3\5\1\20\1\21\1\5\1\22\1\23\1\24\1\25"+
    "\113\0\1\26\21\0\1\27\14\0\2\5\2\0\6\5"+
    "\1\0\3\5\1\30\13\5\1\0\5\5\2\0\1\31"+
    "\4\5\1\0\2\5\1\0\4\5\1\0\1\5\4\0"+
    "\1\5\1\6\2\7\1\6\5\5\1\0\3\5\1\30"+
    "\13\5\1\0\5\5\2\0\1\31\4\5\1\7\2\5"+
    "\1\0\4\5\1\0\1\5\5\0\4\7\42\0\1\7"+
    "\17\0\2\10\43\0\1\10\15\0\2\5\2\0\1\5"+
    "\3\11\2\5\1\0\3\5\1\30\13\5\1\0\5\5"+
    "\2\0\1\31\4\5\1\0\2\5\1\0\4\5\1\0"+
    "\1\5\4\0\1\12\2\0\1\12\1\0\60\12\5\0"+
    "\3\32\2\0\1\33\3\0\1\34\1\35\1\36\10\0"+
    "\1\36\1\37\2\0\1\40\1\0\1\40\1\16\2\0"+
    "\1\5\1\41\5\0\2\16\2\40\1\0\1\21\1\0"+
    "\1\22\1\0\1\24\1\0\1\5\2\0\1\5\1\0"+
    "\60\5\16\42\1\43\13\42\1\44\32\42\42\31\1\5"+
    "\22\31\60\0\1\45\25\0\1\46\50\0\5\47\1\0"+
    "\2\47\2\0\13\47\2\0\4\47\4\0\3\47\5\0"+
    "\2\47\14\0\3\32\51\0\1\22\1\0\1\24\1\0"+
    "\1\50\2\0\1\50\1\0\1\50\1\51\4\50\1\52"+
    "\1\53\2\50\1\54\4\50\1\55\40\50\61\0\1\22"+
    "\1\0\1\24\31\0\1\56\36\0\14\37\1\57\13\37"+
    "\1\44\32\37\2\40\2\0\6\40\1\0\3\40\1\0"+
    "\13\40\1\0\5\40\3\0\4\40\1\0\2\40\1\0"+
    "\4\40\1\0\1\40\25\0\1\60\44\0\2\42\1\0"+
    "\1\42\1\0\2\42\3\0\2\61\1\0\1\42\2\0"+
    "\1\42\1\0\2\42\3\0\1\61\2\42\1\0\5\42"+
    "\50\0\1\62\45\0\5\47\1\0\2\47\2\0\13\47"+
    "\2\0\4\47\4\0\3\47\2\0\1\63\2\0\2\47"+
    "\15\0\2\64\62\0\4\65\10\0\3\65\10\0\1\65"+
    "\2\0\1\65\15\0\1\65\14\0\4\66\10\0\3\66"+
    "\10\0\1\66\2\0\1\66\15\0\1\66\27\0\1\67"+
    "\67\0\1\70\56\0\1\71\14\0\1\42\33\0\2\37"+
    "\1\0\1\37\1\0\2\37\6\0\1\37\2\0\1\37"+
    "\1\0\2\37\3\0\1\72\2\37\1\0\5\37\43\0"+
    "\1\73\52\0\4\42\10\0\3\42\10\0\1\42\2\0"+
    "\1\42\15\0\1\42\55\0\1\74\24\0\2\50\62\0"+
    "\4\75\10\0\3\75\10\0\1\75\2\0\1\75\15\0"+
    "\1\75\14\0\4\52\10\0\3\52\10\0\1\52\2\0"+
    "\1\52\15\0\1\52\30\0\1\76\70\0\1\77\71\0"+
    "\1\37\37\0\4\37\10\0\3\37\10\0\1\37\2\0"+
    "\1\37\15\0\1\37\53\0\1\100\67\0\1\27\22\0"+
    "\4\101\10\0\3\101\10\0\1\101\2\0\1\101\15\0"+
    "\1\101\31\0\1\102\70\0\1\103\61\0\1\104\35\0"+
    "\1\22\1\0\1\24\6\0\4\50\10\0\3\50\10\0"+
    "\1\50\2\0\1\50\15\0\1\50\32\0\1\50\70\0"+
    "\1\105\102\0\1\106\43\0\1\102\76\0\1\35\22\0"+
    "\1\22\1\0\1\24\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2968];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\11\12\1\1\11\3\1\4\11\5\0"+
    "\1\11\4\0\1\1\3\0\2\11\1\0\1\1\1\11"+
    "\5\1\7\0\2\1\6\0\1\1\3\0\1\1\5\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[70];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  RacketLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return RacketTypes.NUMBER;
            } 
            // fall through
          case 18: break;
          case 2: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 19: break;
          case 3: 
            { return RacketTypes.IDENTIFIER;
            } 
            // fall through
          case 20: break;
          case 4: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 21: break;
          case 5: 
            { return RacketTypes.COMMENT;
            } 
            // fall through
          case 22: break;
          case 6: 
            { return RacketTypes.CONSTANT;
            } 
            // fall through
          case 23: break;
          case 7: 
            { return RacketTypes.DOT;
            } 
            // fall through
          case 24: break;
          case 8: 
            { return RacketTypes.UNQUOTE;
            } 
            // fall through
          case 25: break;
          case 9: 
            { return RacketTypes.OPEN_PAREN;
            } 
            // fall through
          case 26: break;
          case 10: 
            { return RacketTypes.CLOSE_PAREN;
            } 
            // fall through
          case 27: break;
          case 11: 
            { return RacketTypes.OPEN_SQUARE;
            } 
            // fall through
          case 28: break;
          case 12: 
            { return RacketTypes.CLOSE_SQUARE;
            } 
            // fall through
          case 29: break;
          case 13: 
            { return RacketTypes.SEXP_COMMENT;
            } 
            // fall through
          case 30: break;
          case 14: 
            { {
              String xs = yytext().toString();
              if (xs.equals("#true")
                  || xs.equals("#false")
                  || xs.equals("#t")
                  || xs.equals("#f")
                  || xs.equals("#T")
                  || xs.equals("#F")) {
                  return RacketTypes.BOOLEAN;
              } else {
                  return TokenType.ERROR_ELEMENT;
              }
          }
            } 
            // fall through
          case 31: break;
          case 15: 
            { return RacketTypes.STRING;
            } 
            // fall through
          case 32: break;
          case 16: 
            { yybegin(MAIN); return RacketTypes.HASH_LANG;
            } 
            // fall through
          case 33: break;
          case 17: 
            { return RacketTypes.CHARACTER;
            } 
            // fall through
          case 34: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
